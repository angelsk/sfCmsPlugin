<?php

/**
 * ListingCategoryTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class PluginListingCategoryTable extends Doctrine_Table
{
  /**
   * Returns an instance of this class.
   *
   * @return object ListingCategoryTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('ListingCategory');
  }

  /**
   * Override to add with Translation
   *
   * @param int $listingId
   * @param const $hydrationMode
   */
  public function findByListingId($listingId, $hydrationMode = null)
  {
    $query = $this->createQuery('c')
                  ->innerJoin('c.Translation t')
                  ->where('c.listing_id = ?', array($listingId))
                  ->orderBy('c.position');

    return $query->execute(array(), $hydrationMode);
  }

  /**
   * Get active categories with items for the frontend
   *
   * @param int $listingId
   * @param const $hydrationMode
   */
  public function getActiveCategories($listingId, $hydrationMode = null)
  {
    $query = $this->createQuery('c')
                  ->innerJoin('c.Translation t')
                  // Ensure only get categories with items
                  ->innerJoin('c.ListingItem i')
                  ->where('c.listing_id = ? AND c.is_active = ? AND i.is_active = ? AND i.is_hidden = ?', array($listingId, true, true, false))
                  ->orderBy('c.position');

    return $query->execute(array(), $hydrationMode);
  }

  /**
   * Get count of active/inactive items for this category
   * 
   * @param int $id
   * @param boolean $is_active
   * @return int
   */
  public function getActiveCount($id, $is_active)
  {
    $query = $this->createQuery('c')
                  ->select("COUNT('i.id') AS count")
                  // Ensure only get categories with items
                  ->innerJoin('c.ListingItem i')
                  ->where('c.id = ? AND i.is_active = ?', array($id, $is_active));

    return $query->fetchOne(null, Doctrine_Core::HYDRATE_SINGLE_SCALAR);
  }

  /**
   * Get count of hidden items for this category
   * 
   * @param int $id
   * @return int
   */
  public function getHiddenCount($id)
  {
    $query = $this->createQuery('c')
                  ->select("COUNT('i.id') AS count")
                  // Ensure only get categories with items
                  ->innerJoin('c.ListingItem i')
                  ->where('c.id = ? AND i.is_hidden = ?', array($id, true));

    return $query->fetchOne(null, Doctrine_Core::HYDRATE_SINGLE_SCALAR);
  }
}