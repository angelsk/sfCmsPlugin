<?php

/**
 * PluginSitetreeTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginSitetreeTable extends Doctrine_Table
{
  /**
   * Returns an instance of this class.
   *
   * @return object SitetreeTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('Sitetree');
  }
    
  /**
   * Retrieve a Sitetree node by its routename.
   * Does not check to see if it is active, unless called from siteHelper (frontend use)
   *
   * @param string $site
   * @param string $routeName
   * @param boolean $checkIsActive
   * @return Sitetree
   */
  public function retrieveByRoutename($site, $routeName, $checkIsActive = false) 
  {
    $query = $this->createQuery('s')
          ->innerJoin('s.Translation t')
          ->where("s.site = ? AND s.route_name = ? AND s.is_deleted = ?", array($site, $routeName, false));
          
    if ($checkIsActive) $query->andWhere('s.is_active = ?', array(true));
    
    return $query->execute(array(), Doctrine_Core::HYDRATE_RECORD)->getFirst();
  }
    
    
  /**
   * Retrieve the Sitetree for display / manipulation
   *  
   * @param string $site The current site
   * @param int $level
   * @param int $hydrationMode
   * @param boolean $justActive - only include active nodes
   */
  public function getSitetree($site, $level = null, $hydrationMode, $justActive = true) 
  {
    //$culture = sfContext::getInstance()->getUser()->getCulture();

    $query = $this->createQuery('s')
           ->select('s.route_name, s.level, t.title, s.lft, s.rgt')
           ->leftJoin('s.Translation t ON (s.id = t.id) INDEXBY t.lang', array()) //  AND t.lang = ? $culture
           ->where('s.site = ? AND s.is_deleted = ?', array($site, false))
           ->orderBy('s.lft');
    
    if (!is_null($level)) 
    {
      $query->addWhere('s.level <= ?', $level);
    }
    
    if ($justActive)
    {
      $query->andWhere('s.is_active = ?', true);
    }
    
    return $query->execute(array(), $hydrationMode);
  }
  
  
  /**
   * Get Sitetree nodes for the site
   *
   * @param string $site
   * @param int $hydrationMode
   * @param boolean $includeInactive
   * @return mixed
   */
  public function getSitetreeNodes($site, $hydrationMode = Doctrine_Core::HYDRATE_RECORD, $includeInactive = true) 
  {
    $query = $this->createQuery('s')
          ->where('s.site = ?', array($site))
          ->orderBy('s.lft');
          
    if (!$includeInactive) 
    {
        $query->addWhere('s.is_active = ?', array(true));
    }
    
    return $query->execute(array(), $hydrationMode);
  }
  
  /**
   * Get Sitetree nodes marked as core navigation for a site
   * 
   * @param string $site
   * @return mixed
   */
  public function getCoreNavigation($site) 
  {
    //$culture = sfContext::getInstance()->getUser()->getCulture();

    $query = $this->createQuery('s')
           ->select('s.route_name, s.level, t.title, t.link_title')
           ->leftJoin('s.Translation t ON (s.id = t.id) INDEXBY t.lang', array()) // AND t.lang = ? $culture
           ->where('s.site = ? AND s.is_core_navigation = ? AND s.is_active = ? AND s.is_deleted = ?', array($site, true, true, false))
           ->orderBy('s.lft');
    
    return $query->execute();
  }
  
  /**
   * Get sites that have a copiable site tree structure (more than one un-deleted node)
   *  
   * @return array of sites
   */
  public function getSitesToCopyFrom()
  {
    $q = $this->createQuery()
              ->select('site, count(id) AS nodes')
              ->having('nodes > ?', 1)
              ->groupBy('site')
              ->orderBy('site');
              
     $r = $q->execute(null, Doctrine_Core::HYDRATE_SINGLE_SCALAR);

     return (is_array($r) ? $r : array($r));
  }
  
  /**
   * Set the base query for the Sitetree to include the Translation (less database hits)
   */
  public static function setTreeQueryWithTranslation() 
  {
    //$culture = sfContext::getInstance()->getUser()->getCulture();

    $query = SitetreeTable::getInstance()->createQuery('s')
           ->select('s.*, t.*')
           ->leftJoin('s.Translation t ON (s.id = t.id) INDEXBY t.lang', array()); //  AND t.lang = ? $culture

    $tree = SitetreeTable::getInstance()->getTree();
    $tree->setBaseQuery($query);
    
    return $tree;
  }

  /**
   * Reset the base query
   */
  public static function resetTreeQuery() 
  {
    $tree = SitetreeTable::getInstance()->getTree();
    $tree->resetBaseQuery();
  }
}