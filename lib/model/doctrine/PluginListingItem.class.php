<?php

/**
 * ListingItem
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    site_cms
 * @subpackage model
 * @author     Jo Carter
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginListingItem extends BaseListingItem
{
  /**
   * Creates an unsaved Listing item object from the listing
   *
   * @param Listing $listing
   * @return Listing
   */
  public static function createFromListing(Listing $listing) 
  {
    $listingItem = new ListingItem();
    $listingItem->listing_id = $listing->id;

    return $listingItem;
  }

  /**
   * Update a new Listing item with a content group
   */
  public function updateNew()
  {
    $group = contentGroup::createNew('ListingItem', get_class($this));
    $this->ContentGroup = $group;
    $this->save();
  }
  
  /**
   * Get localised title
   *
   * @return string
   */
  public function getTitle() 
  {
    $lang = sfContext::getInstance()->getUser()->getCulture();
    $title = $this->Translation[$lang]->title;

    // Don't return blank item title - return default culture version if
    // translation not available
    if (!is_null($title)) 
    {
      return $title;
    }
    else 
    {
      $defn         = siteManager::getInstance()->getSite();
      $default_lang = $defn['default_culture'];
      return $this->Translation[$default_lang]->title;
    }
  }
  
  /**
   * Render a listing item
   *
   * @param boolean $tryUseCache
   * @param Sitetree $sitetreeNode
   * @param Listing $listing
   */
  public function render($tryUseCache = false, $sitetreeNode = null, $listing = null)
  {
    if (is_null($listing)) $listing = $this->Listing;
    if (is_null($sitetreeNode)) $sitetreeNode = $listing->Sitetree;
    
    $manager = listingManager::getInstance();
    $template = $listing->template;
    
    $partialVariables = array('sitetree' => $sitetreeNode);

    // init fragment groups
    $contentGroup = $this->initContentGroup();
    $listing->initContentGroup();

    // cache
    $useCache = false;
    
    if ($tryUseCache)
    {
      // See if we should be using the cache for this template
      if ($manager->getTemplateDefinitionParameter($template, 'item_cacheable', false))
      {
        $request = sfContext::getInstance()->getRequest();
        $useCache = true;
        $culture = sfContext::getInstance()->getUser()->getCulture();
        $partialVariables['cacheName'] = "listing.{$listing->id}.{$this->id}.{$culture}.{$request->isXmlHttpRequest()}";
      }
    }

    // get template file location
    $partialVariables['templateFileLocation'] = $manager->getItemTemplateFile($template);
    
    // Add stylesheets etc to response
    $response = sfContext::getInstance()->getResponse();
    
    if ($stylesheets = $manager->getTemplateDefinitionParameter($template, 'item_stylesheets'))
    {
      foreach ($stylesheets as $stylesheet) $response->addStylesheet($stylesheet, '', array('media' => $media));
    }
    
    if ($javascripts = $manager->getTemplateDefinitionParameter($template, 'item_javascripts'))
    {
      foreach ($javascripts as $javascript) $response->addJavascript($javascript, 'last');
    }

    $partialVariables['useCache']   = $useCache;
    $partialVariables['listing']    = $listing;
    $partialVariables['item']       = $this;
    $partialVariables['category']   = $this->ListingCategory;
    $partialVariables['contentGroup'] = $contentGroup;
    
    if (!function_exists('get_partial'))
    {
      sfApplicationConfiguration::getActive()->loadHelpers('Partial');
    }

    // This is ugly - but we don't want the partial to be escaped as it contains HTML
    $strategy = sfConfig::get('sf_escaping_strategy');
    sfConfig::set('sf_escaping_strategy', false);
    $content = get_partial('listingDisplay/render', $partialVariables);
    sfConfig::set('sf_escaping_strategy', $strategy);
    
    return $content;
  }
  

  /**
   * Initialise and return the ContentGroup for this item
   *
   * @return contentGroup
   */
  protected function initContentGroup()
  {
    $contentGroup = $this->ContentGroup;
    $contentGroup->initialiseForRender(sfContext::getInstance()->getUser()->getCulture());

    return $contentGroup;
  }

  /**
   * Render one of the fragments for this Listing.
   *
   * The ContentGroup must be initialised first.
   *
   * @param string $identifier
   * @param array $extraParams
   */
  public function renderContent($identifier, $extraParams = array())
  {
    return $this->ContentGroup->renderContent($identifier, $extraParams);
  }

  /**
   * Handle when the content for the item has changed.
   */
  public function handleContentChanged()
  {
    $listing = $this->Listing;

    // This removes the cached pages from both the Listing and the items
    siteManager::getInstance()->getCache()->removePattern("listing.{$listing->id}.*");
  }

  public function publish()
  {
    $this->is_active = true;
    $this->save();
  }

  public function unPublish()
  {
    $this->is_active = false;
    $this->save();
  }

  public function delete(Doctrine_Connection $conn = null)
  {
    // delete translations
    $translations = $this->Translation;
    foreach ($translations as $lang => $translation)
    {
      $translation->delete();
      $translation->free();
    }

    // delete the item:
    parent::delete($conn);
    
    // delete associated item content group
    $this->ContentGroup->delete();
  }
}
